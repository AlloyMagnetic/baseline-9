<?php

/**
 * @file
 * Contains alloy_blog.module.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\alloy_blog\Entity\Blog;
use Drupal\taxonomy\Entity\Term;
use Drupal\user\UserInterface;
use Drupal\views\Entity\View;
use Drupal\views\ViewExecutable;
use Drupal\views\Views;
use Drupal\Component\Serialization\Json;

/**
 * Implements hook_help().
 */
function alloy_blog_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the alloy_blog module.
    case 'help.page.alloy_blog':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Coming Soon') . '</p>';
      return $output;

    default:
  }
}

function alloy_blog_theme($existing, $type, $theme, $path) {
  $theme = [];
  $theme['blog'] = [
    'render element' => 'elements',
    'file' => 'blog.page.inc',
    'template' => 'blog',
  ];
  return $theme;
}

function alloy_blog_theme_registry_alter(&$theme_registry) {
  $path = drupal_get_path('module', 'alloy_blog');
  $theme_registry['user']['theme_path'] = $path;
  $theme_registry['user']['path'] = $path . '/templates';
}

function alloy_blog_preprocess_node(&$variables) {
  $node = $variables['elements']['#node'];

  $type = $node->getType();
  $id = $node->get('nid')->value;
  $view_mode = $variables['view_mode'];

  if ($type == 'blog_post') {
    if ($view_mode == 'full') {

      // Add author bio
      $args = [$id];
      $view = Views::getView('author');
      $display = 'bio_block';
      if (is_object($view)) {
        $view->setArguments($args);
        $view->setDisplay($display);
        $view->preExecute();
        $view->execute();
        $variables['content']['author_bio'] = [
          'bio' => $view->buildRenderable($display, $args),
          '#weight' => 10,
        ];
      }

      // Add facebook app id
      $fb_app_id = \Drupal::config('alloy_blog.settings')->get('facebook_app_id');
      if ($fb_app_id) {
        $variables['content']['facebook_app_id']['#markup'] = $fb_app_id;
      }

      // Add disqus shortname
      // Config can provide a default shortname, or individual blogs can
      // provide field_disqus_shortname
      $shortname = \Drupal::config('alloy_blog.settings')->get('default_disqus_shortname');
      if ($shortname) {
        $variables['content']['disqus_shortname']['#markup'] = $shortname;
        $variables['content']['disqus_page_id']['#markup'] = 'node.blog_post.' . $node->id();
      }
      if ($blog_id = $node->get('field_blog')->getValue()[0]['target_id']) {
        $blog = Blog::load($blog_id);
        $shortname = $blog->get('field_disqus_shortname')->getValue();
        if (isset($shortname[0]['value'])) {
          $variables['content']['disqus_shortname']['#markup'] = $shortname[0]['value'];
          $variables['content']['disqus_page_id']['#markup'] = 'node.blog_post.' . $node->id();
          $variables['content']['disqus_shortname']['#cache']['tags'] = ['blog:' . $blog_id];
        }
      }

    }
    else if ($view_mode == 'teaser') {
      // Limit to 1 category in teasers
      if (isset($variables['content']['field_categories']['#items'])) {
        $category_count = count($variables['content']['field_categories']['#items']);
        for ($i = 1; $i < $category_count; $i++) {
          unset($variables['content']['field_categories'][$i]);
        }
      }
      // Add class to title if no image present
      if (!isset($variables['content']['field_blog_post_image'][0])) {
        $variables['title_attributes']['class'][] = 'no-image';
      }
    }
  }
}

function alloy_blog_entity_view(&$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->getEntityTypeId() == 'user' && $view_mode == 'author_bio') {

    $first_name = $entity->get('field_first_name')->getValue();
    if (isset($first_name[0]['value'])) {
      $first_name = $first_name[0]['value'];
    }
    else {
      $first_name = $entity->label();
    }
    $last_name = $entity->get('field_last_name')->getValue();
    if (isset($last_name[0]['value'])) {
      $last_name = $last_name[0]['value'];
    }
    else {
      $last_name = '';
    }
    $familiar_name = $entity->get('field_familiar_name')->getValue();
    if (isset($familiar_name[0]['value'])) {
      $familiar_name = $familiar_name[0]['value'];
    }
    else {
      $familiar_name = $first_name;
    }

    $contact = \Drupal::service('user.data')->get('contact', $entity->id(), 'enabled');
    if ($contact) {
      $build['contact_link'] = [
        'link' => Link::createFromRoute('Contact ' . $familiar_name, 'entity.user.contact_form', ['user' => $entity->id()], ['attributes' => ['class' => ['btn', 'btn-primary']]])->toRenderable(),
        '#weight' => 10,
      ];
    }
    $name = implode(' ', [$first_name, $last_name]);
    $build['full_name'] = [
      '#markup' => $name,
      '#weight' => 0,
    ];
    if (isset($build['field_facebook'][0])) {
      $build['field_facebook'][0]['#title'] = "Facebook";
    }
    if (isset($build['field_linkedin'][0])) {
      $build['field_linkedin'][0]['#title'] = "LinkedIn";
    }
    if (isset($build['field_twitter_handle'][0])) {
      $build['field_twitter_handle'][0] = Link::fromTextAndUrl('Twitter', Url::fromUri('https://www.twitter.com/' . $entity->get('field_twitter_handle')->getValue()[0]['value']));
    }
  }
}

function alloy_blog_preprocess_assembly(&$variables) {
  $assembly = $variables['elements']['#assembly'];
  $type = $assembly->bundle();

  if ($type == 'blog_feed' || $type == 'recent_blog_posts') {
    $args = [
      'fields' => [
        'blog',
        'category',
        'author'
      ],
    ];
    foreach($args['fields'] as $index => $field) {
      foreach($assembly->get('field_filter_by_' . $field)->getValue() as $value) {
        $args['values'][$field][] = $value['target_id'];
      }
      if (isset($args['values'][$field]) && count($args['values'][$field])) {
        $args['view_args'][] = implode('+', $args['values'][$field]);
      }
      else {
        $args['view_args'][] = 'all';
      }
    }

    $view = \Drupal\views\Views::getView('blog');
    $variables['content']['view'] = $view->buildRenderable('recent', $args['view_args']);
    $variables['content']['view']['#cache']['keys'][] = serialize($args['view_args']);
    $variables['content']['view']['#weight'] = 5;

    // If the filter is a single blog, single term, or single blog+term, use the
    // seo friendly url aliases for the More Blog Posts link
    $route_params = [];
    $blog_count = isset($args['values']['blog']) ? count($args['values']['blog']) : 0;
    $term_count = isset($args['values']['category']) ? count($args['values']['category']) : 0;

    $blog = $blog_count == 1 ? Blog::load(reset($args['values']['blog'])) : FALSE;
    $term = $term_count == 1 ? Term::load(reset($args['values']['category'])) : FALSE;

    $text = "More blog posts";
    $route = 'view.blog.global';

    // filter by blog, no terms
    if ($blog_count == 1 && $term_count == 0) {
      $route = 'entity.blog.canonical';
      $route_params = ['blog' => implode($args['values']['blog'])];
      $text = t('More @title blog posts', ['@title' => $blog->getTitle()]);
    }
    // filter by terms no blog
    else if ($blog_count == 0 && $term_count == 1) {
      $route = 'entity.taxonomy_term.canonical';
      $route_params = ['taxonomy_term' => implode($args['values']['category'])];
      $text = t('More @title blog posts', ['@title' => $term->getName()]);
    }
    // filter by both
    if ($blog_count == 1 && $term_count == 1) {
      $link = Link::fromTextAndUrl($text, $view->getUrl(array_values($args['view_args']), 'blog_term'));
    }
    else {
      $link = Link::fromTextAndUrl($text, Url::fromRoute($route, $route_params));
    }

    $link->getUrl()->setOption('attributes', ['class' => ['blog--more-link']]);
    $variables['content']['more']['#weight'] = 6;
    $variables['content']['more']['link'] = $link->toRenderable();
  }
}

function alloy_blog_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (in_array($form_id, ['node_blog_post_edit_form', 'node_blog_post_form'])) {
    // Don't show the blog field if there is only one blog
    $ids = \Drupal::entityQuery('blog')->execute();
    if (is_array($ids) && count($ids) == 1) {
      $blog = Blog::load(reset($ids));
      $form['field_blog']['widget']['#default_value'] = [$blog->id() => $blog->id()];
      $form['field_blog']['#access'] = FALSE;
    }
    else {
      $categories = [];
      foreach (Blog::loadMultiple(\Drupal::entityQuery('blog')->execute()) as $blog) {
        if (!$blog->hasField('field_categories')) {
          break;
        }
        foreach ($blog->get('field_categories')->getValue() as $val) {
          $categories[$blog->id()][] = $val['target_id'];
        }
      }

      if ($categories) {
        // Limit categories
        $form['#attached']['library'][] = 'alloy_blog/categories';
        $form['#attached']['drupalSettings']['alloy_blog_categories'] = $categories;
      }
    }
  }
}

function alloy_blog_entity_presave(EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'blog') {
    $blog_slug = $entity->get('field_url_slug')->value;
    if (!$blog_slug) {
      $blog_slug = \Drupal::service('pathauto.alias_cleaner')->cleanString($entity->title->value);
      $entity->field_url_slug = $blog_slug;
    }
  }
}

function alloy_blog_entity_insert(EntityInterface $entity) {
  if (in_array($entity->getEntityTypeId(), ['blog', 'taxonomy_term'])) {
    \Drupal::service('alloy_blog.blog_term_path_manager')->blogOrTermEdit($entity);
  }
}

function alloy_blog_entity_update(EntityInterface $entity) {
  if (in_array($entity->getEntityTypeId(), ['blog', 'taxonomy_term'])) {
    \Drupal::service('alloy_blog.blog_term_path_manager')->blogOrTermEdit($entity);
  }
}

/**
 * Implements hook_views_data_alter().
 *
 * Use our customized argument/contextual filter to allow title replacement.
 */
function alloy_blog_views_data_alter(&$data) {
  if (isset($data['node__field_blog']['field_blog_target_id']['argument']['id'])) {
    $data['node__field_blog']['field_blog_target_id']['argument']['id'] = 'blog_id';
  }
}

/**
 * Implements hook_views_post_render().
 *
 * Views contextual filter title override sets the h1 page title, but not the HTML <head> title.
 */
function alloy_blog_views_post_render(ViewExecutable $view) {
  if ($view->id() == 'blog' && in_array($view->current_display, ['term', 'blog_term'])) {
    $route = \Drupal::routeMatch()->getCurrentRouteMatch()->getRouteObject();
    $route->setDefault('_title', $view->getTitle());
  }
}

/**
 * Implements hook_page_attachments().
 *
 * Load all meta tags for this page.
 */
function alloy_blog_page_attachments(array &$attachments) {
  $node = \Drupal::routeMatch()->getParameter('node');
  if (!($node instanceof \Drupal\node\NodeInterface) || $node->getType() != 'blog_post') {
    // You can get nid and anything else you need from the node object.
    return;
  }

  try {
    $datalayer = [
      'blog' => $node->get('field_blog')->entity->label(),
    ];
  }
  catch (\Exception $e) {
    \Drupal::logger('alloy_blog')->error('Exception adding alloy blog datalayer: ' . $e->getMessage());
    return;
  }

  if (empty($attachments['#attached'])) {
    $attachments['#attached'] = [];
  }
  if (empty($attachments['#attached']['html_head'])) {
    $attachments['#attached']['html_head'] = [];
  }

  $attachments['#attached']['html_head'][] = [
    [
      '#type' => 'html_tag',
      '#tag' => 'script',
      '#value' => 'window.dataLayer = window.dataLayer || []; window.dataLayer.push(' . Json::encode($datalayer) . ');',
    ],
    'alloy_blog_datalayer'
  ];

}
